#! /bin/bash

# ocho, simple wrapper for echo/printf to do some more useful things

#colours!
colourERROR=1
colourWARN=3
colourSUCCESS=2
colourNORM=6

#=====================================================================================================
#	ochow - prints the given character across the full width of the terminal
#=====================================================================================================
function ochow {
	printf "$1%.0s" $( seq 1 $( tput cols ) )
}


#=====================================================================================================
#	ochoc function - prints the given string with the given colour
#-----------------------------------------------------------------------------------------------------
#	0 - Black
#	1 - Red
#	2 - Green
#	3 - Yellow
#	4 - Blue
#	5 - Magenta
#	6 - Cyan
#	7 - White
#=====================================================================================================
function ochoc {
	echo "$( tput setaf $1 )$2$( tput sgr0 )"
}

#=====================================================================================================
#	ochoe function
#=====================================================================================================
function ochoe {

	local colour=0

	case $1 in 
		"ERROR" )
		colour=$colourERROR
		# we should bel here to show something has errored
		tput bel
		;;
		"WARNING" )
		colour=$colourWARN
		;;
		"SUCCESS" )
		colour=$colourSUCCESS
		# we should bel here to show something has succeeded
		tput bel
		;;
		* )
		;;
	esac

	# if we've got a colour we want to print with the colour
	if [ ! $colour == 0 ]; then
		ochoc $colour "$*"
	else
		ochoc $colourNORM "$*"
	fi
}



# Parse arguments
unset optarg_p
unset optarg_w
unset optarg_e
unset optarg_s
while getopts "pwes" opt; do
	case $opt in
		p)
			optarg_p=true
			;;
		w)
			optarg_w=true
			;;
		e)
			optarg_e=true
			;;
		s)
			optarg_s=true
			;;

	esac
done

shift $((OPTIND -1))

if [ -n "$optarg_p" ]; then
	ochow "$1"
elif [ -n "$optarg_w" ]; then
	ochoe WARNING "$*"
elif [ -n "$optarg_e" ]; then
	ochoe ERROR "$*"
elif [ -n "$optarg_s" ]; then
	ochoe SUCCESS "$*"
else
	ochoe "$*"
fi

